apiVersion: apps/v1
kind: Deployment
metadata:
  name: aircall-slack-service
  namespace: aircall-slack
  labels:
    app: aircall-slack-service
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: aircall-slack-service
  template:
    metadata:
      labels:
        app: aircall-slack-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "6000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: aircall-slack-service
        image: IMAGE_PLACEHOLDER
        imagePullPolicy: Always
        ports:
        - containerPort: 6000
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "6000"
        - name: NODE_ENV
          value: "production"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: aircall-slack-secrets
              key: mongodb-uri
        - name: AIRCALL_API_ID
          valueFrom:
            secretKeyRef:
              name: aircall-slack-secrets
              key: aircall-api-id
        - name: AIRCALL_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: aircall-slack-secrets
              key: aircall-api-token
        - name: SLACK_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: aircall-slack-secrets
              key: slack-api-token
        - name: SLACK_CHANNEL_ID
          valueFrom:
            secretKeyRef:
              name: aircall-slack-secrets
              key: slack-channel-id
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: aircall-slack-secrets
              key: jwt-secret
        - name: EXCLUDED_USERS
          valueFrom:
            configMapKeyRef:
              name: aircall-slack-config
              key: excluded-users
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 6000
            httpHeaders:
            - name: User-Agent
              value: kube-probe/1.0
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 6000
            httpHeaders:
            - name: User-Agent
              value: kube-probe/1.0
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
      restartPolicy: Always
      securityContext:
        fsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
